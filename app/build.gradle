/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
}

// enable preview for text blocks in lower versions of java
tasks.withType(JavaCompile).each {
    it.options.compilerArgs.add('--enable-preview')
}

applicationDefaultJvmArgs += ["--enable-preview"]

test {
    testLogging {
      events "passed", "skipped", "failed" , "standardOut", "standardError"

      showExceptions true
      exceptionFormat "full"
      showCauses true
      showStackTraces true

      showStandardStreams = false
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // add selenium web driver package
    implementation 'org.seleniumhq.selenium:selenium-java:4.10.0'

    // add org.apache.commons
    implementation 'org.apache.commons:commons-text:1.9'

    // search console api
    implementation 'com.google.apis:google-api-services-searchconsole:v1-rev20211026-1.32.1'

    // dotenv
    implementation 'io.github.cdimascio:dotenv-java:2.3.1'
}

application {
    // Define the main class for the application.
    mainClass = 'seo.tool.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

run {

	environment "WEBDRIVER", "./src/main/resources/geckodriver"
}

jar {

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	manifest {
		attributes(
		                'Main-Class': 'seo.tool.App'
				        
			  )
			      
	}

	from {
		configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

run.standardInput = System.in;


